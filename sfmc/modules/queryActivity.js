const soap = require('../soap');


/*
sfmc.modules.dataExtensions.list(auth, (err, data) => {
  console.log(data);
});
*/

const list = (authConfig, next) => {
  soap.execute(authConfig, 'Retrieve', `
      <soapenv:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
       <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
          <RetrieveRequest>
             <ObjectType>DataExtension</ObjectType>
             <Properties>ObjectID</Properties>
             <Properties>CustomerKey</Properties>
             <Properties>Name</Properties>
             <Properties>IsSendable</Properties>
             <Properties>SendableSubscriberField.Name</Properties>
          </RetrieveRequest>
       </RetrieveRequestMsg>
    </soapenv:Body>`, next);
};

// append, update (enkel mogelijk als dataExtensions een primary key heeft), overwrite

// TODO: cleaner error message.
const create = (authConfig, settings, next) => {
  const extensionName = 'DESelect';
  const name = settings.name || `${extensionName}_${new Date().getTime()}`;
  soap.execute(authConfig, 'Create', `
  <soapenv:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <CreateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">
     <Options>
     </Options>
     <Objects xsi:type="QueryDefinition">
      <PartnerKey xsi:nil="true">
      </PartnerKey>
      <ObjectID xsi:nil="true">
      </ObjectID>
      <CustomerKey>${name}</CustomerKey>
      <Name>${name}</Name>
      <Description>Automatically generated by ${extensionName}.</Description>
      <QueryText>${settings.query}</QueryText>
      <TargetType>DE</TargetType>
      <DataExtensionTarget>
       <CustomerKey>${settings.DECustomerKey}</CustomerKey>
       <Name>${settings.DEName}</Name>
      </DataExtensionTarget>
      <TargetUpdateType>Overwrite</TargetUpdateType>
     </Objects>
    </CreateRequest>
   </soapenv:Body>`, (err, data) => {
     if (data.Results && data.Results.NewObjectID && typeof data.Results.NewObjectID !== 'undefined') {
       if (data && data.Results && data.OverallStatus) {
         if (data.OverallStatus === 'Error') {
           next(data.Results.StatusMessage, {
             success: false,
             message: data.Results.StatusMessage,
             ObjectID: '',
           });
         } else {
           next(false, {
             success: true,
             message: '',
             ObjectID: data.Results.NewObjectID,
           });
         }
       } else {
         next('No return from SFMC.', {
           success: false,
           message: 'Unknown error from SFMC API',
           ObjectID: data.Results.NewObjectID,
         });
       }
     } else if (data.OverallStatus === 'Error') {
       next(data.Results.StatusMessage, {
         success: false,
         ObjectID: '',
         message: data.Results.StatusMessage,
         result: {},
       });
     } else {
       next(false, {
         success: false,
         ObjectID: '',
         message: 'Unexpected error.',
         result: data,
       });
     }
   });
};


/*
<Name>${settings.name}</Name>
<Description>${settings.description}</Description>
*/

const update = (authConfig, objectId, settings, next) => {
  soap.execute(authConfig, 'Update', `
  <soapenv:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <UpdateRequest xmlns="http://exacttarget.com/wsdl/partnerAPI">
     <Options />
     <Objects xsi:type="QueryDefinition">
     <ObjectID>${objectId}</ObjectID>
      <CustomerKey></CustomerKey>
      <QueryText>${settings.query}</QueryText>
      <DataExtensionTarget>
       <CustomerKey>${settings.extensionId}</CustomerKey>
       <Name>${settings.extensionName}</Name>
      </DataExtensionTarget>
      <TargetUpdateType>Overwrite</TargetUpdateType>
     </Objects>
    </UpdateRequest>
   </soapenv:Body>`, (err, data) => {
     if (data && data.Results && data.OverallStatus) {
       if (data.OverallStatus === 'Error') {
         if (typeof next === 'function') {
           next(data.Results.StatusMessage, false);
         }
       } else if (typeof next === 'function') {
         next(false, data);
       }
     } else if (typeof next === 'function') {
       next('No return from SFMC.', false);
     }
   });
};


const run = (authConfig, objectId, next) => {
  soap.execute(authConfig, 'Perform', `
  <soapenv:Body xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <PerformRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
     <Action>Start</Action>
     <Definitions>
      <ns1:Definition xmlns:ns1="http://exacttarget.com/wsdl/partnerAPI" xsi:type="ns1:QueryDefinition">
       <ns1:PartnerKey xsi:nil="true"/>
       <ns1:ModifiedDate xsi:nil="true"/>
       <ns1:ObjectID>${objectId}</ns1:ObjectID>
      </ns1:Definition>
     </Definitions>
    </PerformRequestMsg>
   </soapenv:Body>`, (err, data) => {
     // cleanup data object
     if (data.Results && data.Results.Result && data.Results.Result.Task) {
       next(false, data.Results.Result.Task);
     } else {
       console.log(data);
       next('Unexpected error.', {
         success: false,
         message: 'Unexpected error.',
       });
     }
   });
};

// status can be: Queued, Processing, Complete
const status = (authConfig, taskId, next) => {
  soap.execute(authConfig, 'Retrieve', `<soapenv:Body>
    <RetrieveRequestMsg xmlns="http://exacttarget.com/wsdl/partnerAPI">
       <RetrieveRequest>
          <ObjectType>AsyncActivityStatus</ObjectType>
          <Properties>Status</Properties>
          <Properties>StartTime</Properties>
          <Properties>EndTime</Properties>
          <Properties>TaskID</Properties>
          <Properties>ParentInteractionObjectID</Properties>
          <Properties>InteractionID</Properties>
          <Properties>Program</Properties>
          <Properties>StepName</Properties>
          <Properties>ActionType</Properties>
          <Properties>Type</Properties>
          <Properties>Status</Properties>
          <Properties>CustomerKey</Properties>
          <Properties>ErrorMsg</Properties>
          <Properties>CompletedDate</Properties>
          <Properties>StatusMessage</Properties>
          <Filter xsi:type="SimpleFilterPart">
             <Property>TaskID</Property>
             <SimpleOperator>equals</SimpleOperator>
             <Value>${taskId}</Value>
          </Filter>
       </RetrieveRequest>
    </RetrieveRequestMsg>
  </soapenv:Body>`, (err, data) => {
    if (data && data.Results) {
      if (data.Results.Properties && data.Results.Properties.Property) {
        const result = {
          moment: new Date().getTime(),
        };

        for (let i = 0; i < data.Results.Properties.Property.length; i += 1) {
          const name = data.Results.Properties.Property[i].Name;
          // result[name] = data.Results.Properties.Property[i].Value;
          if (name === 'CompletedDate' || name === 'StatusMessage' || name === 'Status') {
            result[name] = data.Results.Properties.Property[i].Value;
          }
        }
        next(false, result);
      }
    } else {
      next(false, {
        success: false,
        message: 'Auth problem or ask not found.',
      });
    }
  });
};

module.exports = {
  list,
  create,
  update,
  run,
  status,
};
